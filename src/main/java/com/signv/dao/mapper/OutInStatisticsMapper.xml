<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.signv.dao.OutInStatisticsMapper">
  <resultMap id="BaseResultMap" type="com.signv.domain.OutInStatistics">
    <id column="out_in_id" jdbcType="INTEGER" property="outInId" />
    <result column="out_in_goods_id" jdbcType="INTEGER" property="outInGoodsId" />
    <result column="out_in_goods_name" jdbcType="VARCHAR" property="outInGoodsName" />
    <result column="out_in_num" jdbcType="INTEGER" property="outInNum" />
    <result column="out_in_status" jdbcType="BIT" property="outInStatus" />
    <result column="out_in_amount" jdbcType="DOUBLE" property="outInAmount" />
    <result column="out_in_date" jdbcType="TIMESTAMP" property="outInDate" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    out_in_id, out_in_goods_id, out_in_goods_name, out_in_num, out_in_status, out_in_amount, 
    out_in_date
  </sql>
  <select id="selectByExample" parameterType="com.signv.domain.OutInStatisticsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from out_in_statistics
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from out_in_statistics
    where out_in_id = #{outInId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from out_in_statistics
    where out_in_id = #{outInId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.signv.domain.OutInStatisticsExample">
    delete from out_in_statistics
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.signv.domain.OutInStatistics">
    insert into out_in_statistics (out_in_id, out_in_goods_id, out_in_goods_name, 
      out_in_num, out_in_status, out_in_amount, 
      out_in_date)
    values (#{outInId,jdbcType=INTEGER}, #{outInGoodsId,jdbcType=INTEGER}, #{outInGoodsName,jdbcType=VARCHAR}, 
      #{outInNum,jdbcType=INTEGER}, #{outInStatus,jdbcType=BIT}, #{outInAmount,jdbcType=DOUBLE}, 
      #{outInDate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.signv.domain.OutInStatistics">
    insert into out_in_statistics
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="outInId != null">
        out_in_id,
      </if>
      <if test="outInGoodsId != null">
        out_in_goods_id,
      </if>
      <if test="outInGoodsName != null">
        out_in_goods_name,
      </if>
      <if test="outInNum != null">
        out_in_num,
      </if>
      <if test="outInStatus != null">
        out_in_status,
      </if>
      <if test="outInAmount != null">
        out_in_amount,
      </if>
      <if test="outInDate != null">
        out_in_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="outInId != null">
        #{outInId,jdbcType=INTEGER},
      </if>
      <if test="outInGoodsId != null">
        #{outInGoodsId,jdbcType=INTEGER},
      </if>
      <if test="outInGoodsName != null">
        #{outInGoodsName,jdbcType=VARCHAR},
      </if>
      <if test="outInNum != null">
        #{outInNum,jdbcType=INTEGER},
      </if>
      <if test="outInStatus != null">
        #{outInStatus,jdbcType=BIT},
      </if>
      <if test="outInAmount != null">
        #{outInAmount,jdbcType=DOUBLE},
      </if>
      <if test="outInDate != null">
        #{outInDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.signv.domain.OutInStatisticsExample" resultType="java.lang.Long">
    select count(*) from out_in_statistics
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update out_in_statistics
    <set>
      <if test="record.outInId != null">
        out_in_id = #{record.outInId,jdbcType=INTEGER},
      </if>
      <if test="record.outInGoodsId != null">
        out_in_goods_id = #{record.outInGoodsId,jdbcType=INTEGER},
      </if>
      <if test="record.outInGoodsName != null">
        out_in_goods_name = #{record.outInGoodsName,jdbcType=VARCHAR},
      </if>
      <if test="record.outInNum != null">
        out_in_num = #{record.outInNum,jdbcType=INTEGER},
      </if>
      <if test="record.outInStatus != null">
        out_in_status = #{record.outInStatus,jdbcType=BIT},
      </if>
      <if test="record.outInAmount != null">
        out_in_amount = #{record.outInAmount,jdbcType=DOUBLE},
      </if>
      <if test="record.outInDate != null">
        out_in_date = #{record.outInDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update out_in_statistics
    set out_in_id = #{record.outInId,jdbcType=INTEGER},
      out_in_goods_id = #{record.outInGoodsId,jdbcType=INTEGER},
      out_in_goods_name = #{record.outInGoodsName,jdbcType=VARCHAR},
      out_in_num = #{record.outInNum,jdbcType=INTEGER},
      out_in_status = #{record.outInStatus,jdbcType=BIT},
      out_in_amount = #{record.outInAmount,jdbcType=DOUBLE},
      out_in_date = #{record.outInDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.signv.domain.OutInStatistics">
    update out_in_statistics
    <set>
      <if test="outInGoodsId != null">
        out_in_goods_id = #{outInGoodsId,jdbcType=INTEGER},
      </if>
      <if test="outInGoodsName != null">
        out_in_goods_name = #{outInGoodsName,jdbcType=VARCHAR},
      </if>
      <if test="outInNum != null">
        out_in_num = #{outInNum,jdbcType=INTEGER},
      </if>
      <if test="outInStatus != null">
        out_in_status = #{outInStatus,jdbcType=BIT},
      </if>
      <if test="outInAmount != null">
        out_in_amount = #{outInAmount,jdbcType=DOUBLE},
      </if>
      <if test="outInDate != null">
        out_in_date = #{outInDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where out_in_id = #{outInId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.signv.domain.OutInStatistics">
    update out_in_statistics
    set out_in_goods_id = #{outInGoodsId,jdbcType=INTEGER},
      out_in_goods_name = #{outInGoodsName,jdbcType=VARCHAR},
      out_in_num = #{outInNum,jdbcType=INTEGER},
      out_in_status = #{outInStatus,jdbcType=BIT},
      out_in_amount = #{outInAmount,jdbcType=DOUBLE},
      out_in_date = #{outInDate,jdbcType=TIMESTAMP}
    where out_in_id = #{outInId,jdbcType=INTEGER}
  </update>

  <!--分页获取出入库记录列表-->
  <select id="getOutInPage" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT * FROM out_in_statistics Limit #{start},10
  </select>
  <!--获取所有出入库记录-->
  <select id="getOutInList" resultMap="BaseResultMap">
    SELECT * FROM out_in_statistics
  </select>
</mapper>